#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cidades.h"

double *vizinhancasGlobal = NULL;
int numCidades = 0;

// Estrutura para representar uma cidade


Estrada *getEstrada(const char *nomeArquivo) {
    FILE* arquivo = fopen(nomeArquivo, "r");
    if (arquivo == NULL) {
        printf("Erro ao abrir arquivo");
        exit(1);
    }

    Estrada *estrada = (Estrada *)malloc(sizeof(Estrada));
    if (estrada == NULL) {
        printf("ERRO: não foi possível alocar memória para a estrada!\n");
        exit(1);
    }

    fscanf(arquivo, "%d", &estrada->T);
    if (estrada->T <= 3 || estrada->T >= 1000000) {
        printf("Valor de T invalido");
        fclose(arquivo);
        free(estrada);
        return NULL;
    }

    fscanf(arquivo, "%d", &estrada->N);
    if (estrada->N < 2 || estrada->N >= 10000) {
        printf("Valor de N invalido");
        fclose(arquivo);
        free(estrada);
        return NULL;
    }

    estrada->C = (Cidade *)malloc(estrada->N * sizeof(Cidade));
    if (estrada->C == NULL) {
        printf("ERRO: não foi possível alocar memória para as cidades!\n");
        free(estrada);
        exit(1);
    }

    // Ler as informações das cidades do arquivo
    int i, j;
    for (i = 0; i < estrada->N; i++) {
        fscanf(arquivo, "%d %[^\n]", &estrada->C[i].Posicao, estrada->C[i].Nome);
        
        // Ordenar as cidades em ordem crescente com base na posição
        for (j = i; j > 0 && estrada->C[j].Posicao < estrada->C[j - 1].Posicao; j--) {
            // Trocar as posições das cidades
            Cidade temp = estrada->C[j];
            estrada->C[j] = estrada->C[j - 1];
            estrada->C[j - 1] = temp;
        }
    }

    fclose(arquivo);

    // Alocar memória para as vizinhanças globais
    if (vizinhancasGlobal != NULL) {
        free(vizinhancasGlobal);
    }
    vizinhancasGlobal = (double *)malloc(estrada->N * sizeof(double));
    if (vizinhancasGlobal == NULL) {
        printf("ERRO: não foi possível alocar memória para as vizinhanças!\n");
        free(estrada->C);
        free(estrada);
        exit(1);
    }
    numCidades = estrada->N;

    // Função interna para calcular as vizinhanças
    void calcularVizinhanca(Estrada *estrada) {
        int i;
        for (i = 0; i < estrada->N; i++) {
            double fronteiraAnterior, fronteiraProxima;

            if (i == 0) {
                fronteiraAnterior = 0;
                fronteiraProxima = (estrada->C[i].Posicao + estrada->C[i + 1].Posicao) / 2.0;
            } else if (i == estrada->N - 1) {
                fronteiraAnterior = (estrada->C[i - 1].Posicao + estrada->C[i].Posicao) / 2.0;
                fronteiraProxima = estrada->T;
            } else {
                fronteiraAnterior = (estrada->C[i - 1].Posicao + estrada->C[i].Posicao) / 2.0;
                fronteiraProxima = (estrada->C[i].Posicao + estrada->C[i + 1].Posicao) / 2.0;
            }

            vizinhancasGlobal[i] = fronteiraProxima - fronteiraAnterior;
        }
    }

    // Calcular as vizinhanças e armazenar no array global
    calcularVizinhanca(estrada);

    return estrada;
}

double calcularMenorVizinhanca(const char *nomeArquivo) {
    Estrada *estrada = getEstrada(nomeArquivo);
    if (!estrada) return -1;

    double menorVizinhanca = vizinhancasGlobal[0];
    int i;
    for (i = 1; i < numCidades; i++) {
        if (vizinhancasGlobal[i] < menorVizinhanca) {
            menorVizinhanca = vizinhancasGlobal[i];
        }
    }

    free(estrada->C);
    free(estrada);
//    printf("A menor vizinhanca e: %.2lf\n", menorVizinhanca);
    return menorVizinhanca;
}

char *cidadeMenorVizinhanca(const char *nomeArquivo) {
    Estrada *estrada = getEstrada(nomeArquivo);
    if (!estrada) return NULL;

    double menorVizinhanca = vizinhancasGlobal[0];
    int cidadeMenorVizinhanca = 0;
    int i;
    for (i = 1; i < numCidades; i++) {
        if (vizinhancasGlobal[i] < menorVizinhanca) {
            menorVizinhanca = vizinhancasGlobal[i];
            cidadeMenorVizinhanca = i;
        }
    }

    printf("\n");
    ;

    char *nomeCidade = strdup(estrada->C[cidadeMenorVizinhanca].Nome);

    free(estrada->C);
    free(estrada);

    return nomeCidade;
}
